rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  	function isSameUser(userId) {
    	return request.auth != null && request.auth.uid == userId
    }
    
    function isOwlFor(userId) {
  		return request.auth.uid == get(/databases/$(database)/documents/users/$(userId)).data.owl;
    }
    
    match /users/{userId} {
      allow create, delete: if isSameUser(userId)
      allow read: if isSameUser(userId) || request.auth.uid == resource.data.owl
      
      // The owner can update the doc, but they can't set `owl` to themselves
      allow update: if isSameUser(userId) &&
        !(
          request.resource.data.keys().hasAny(['owl']) &&
          request.resource.data.owl == userId
        );
    }
    
    match /users/{userId}/posts/{postId} {
    	allow read: if isSameUser(userId) || isOwlFor(userId)
    	allow delete: if isSameUser(userId)
      allow create: if isSameUser(userId)
			allow update: if 
      (
      	// owl can only update "score" field
      	isOwlFor(userId) 
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['heart']) 
      ) 
      || 
      (
      	// owner can update everything except for the score
      	isSameUser(userId)
        && !request.resource.data.diff(resource.data).changedKeys().hasAny(['heart'])
      )
    }
    
    match /users/{userId}/stats/{statId} {
		// TEMP: with cloud functions owl will not need to create or update stats
    	allow read, create, update: if isSameUser(userId) || isOwlFor(userId)
    }
  }
}
